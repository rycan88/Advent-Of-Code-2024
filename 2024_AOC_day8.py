inp = '''.....................................O..V.........
..................................................
................................O.........Z.......
....W....................................V....v...
........................m................8........
.....................................n........Z..v
.............F.....3...n....5m....................
................................................V.
................3............iv....Z.............V
...........................O..n..i........p......H
......W..6..............................i.........
......................................b...........
..................................n........p......
........M.......c...........m..5......1...........
...M............................L..5..A...........
...w...........9.............F5..................q
.W.....................................q....p.....
.......W........r.......H.....LA......q...........
................4.F....................A..........
........3.......a.....F...................A..L....
....ME...............................Q..........q.
.E..................ih...................Z........
................E...H...........h.................
.........m.........X..............................
..................0......C.................h......
.M......l.................Q.h.....................
..........C..............0........................
.............lX............3.c....................
......8.X.........c....r..a......H.....9..........
.................QE.....C.........................
..R................a........Q...................7.
...........................a......................
l..........X.R............1..I..........9.........
.................0R..............b.....z......x...
.......l.....w....r..........................b....
.8..........0...................P1z...............
.............c.........................L..........
.................C..N............o............9...
...........e..f..N................................
8.............................B...................
...........4...............................x......
....w....RY..........4.......................P....
.........yw.....Y.............o2...............7..
..6y........4..............fo..............7......
.........Y..6............o......................x.
.....Y....e.....y..I.r...........2................
....e.............................P.......z.bB....
.............6.................B........7......x..
..y.N........f...........1....I....z....B.........
.....e....f.............I.................2.......'''

'''
from collections import defaultdict
L = inp.split("\n")

D = defaultdict(str)
Letters = defaultdict(list)

for y in range(len(L)):
    for x in range(len(L[0])):
        coord = (x, y)
        thing = L[y][x]
        D[coord] = thing
        Letters[thing].append(coord)

def addTups(t1, t2):
    return (t1[0] + t2[0], t1[1] + t2[1])

def subtractTups(t1, t2):
    return (t1[0] - t2[0], t1[1] - t2[1])

S = set()

for letter in Letters:
    if letter == ".":
        continue
    Coords = Letters[letter]
    for i in range(len(Coords)):
        for j in range(i + 1, len(Coords)):
            t1, t2 = Coords[i], Coords[j]
            diff = subtractTups(t1, t2)

            newCoord1 = addTups(t1, diff)
            newCoord2 = subtractTups(t2, diff)

            if (newCoord1 in D):
                S.add(newCoord1)
            if (newCoord2 in D):
                S.add(newCoord2)
print(len(S))
'''

from collections import defaultdict
L = inp.split("\n")

D = defaultdict(str)
Letters = defaultdict(list)

for y in range(len(L)):
    for x in range(len(L[0])):
        coord = (x, y)
        thing = L[y][x]
        D[coord] = thing
        Letters[thing].append(coord)

def addTups(t1, t2):
    return (t1[0] + t2[0], t1[1] + t2[1])

def subtractTups(t1, t2):
    return (t1[0] - t2[0], t1[1] - t2[1])

S = set()

for letter in Letters:
    if letter == ".":
        continue
    Coords = Letters[letter]
    for i in range(len(Coords)):
        for j in range(i + 1, len(Coords)):
            t1, t2 = Coords[i], Coords[j]

            S.add(t1)
            S.add(t2)

            diff = subtractTups(t1, t2)

            newCoord1 = addTups(t1, diff)
            newCoord2 = subtractTups(t2, diff)

            while newCoord1 in D:
                S.add(newCoord1)
                newCoord1 = addTups(newCoord1, diff)

            while newCoord2 in D:
                S.add(newCoord2)
                newCoord2 = subtractTups(newCoord2, diff)
print(len(S))